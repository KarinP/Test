* Unix Shell Exercises

List of posted exercises:

- A1, A2
- B1, B2, B3, B4
- C1, C2
- G1
- PE1

There is no way to learn shell (or git or python...) without using it. Here is some training. Comments:

- I will be adding more exercises to this file. I will split the file if it gets too crowded. But exercises numeration (A1, A2, B1...) will keep constant.

- Most exercises should not be time consuming - a few minutes at worst.

- Come at any time to ask me any questions. But remember, *--help*, *man*, *info*, your classmates and *google* might be faster (in that increasing speed order).

- My plan is to solve many exercises in class. Both as reinforcement and to introduce new concepts.

- At some point I might ask you to hand-in solutions for some exercises, using git. Nothing awful will happen if you don't, but I also need feedback.

- If I ask you to hand-in, *man script* might come handy.

- You do not need to be able to answer to all the questions now. Most probably, you will very soon.


** Run the initialization script
*** A1 Generate the exercises playground, create a command list

Run the following commands in an interactive shell. Let me know if something goes wrong.

#+begin_src bash

# Go to the exercises subdirectory in your carpentry directory
cd ~/carpentry/the-unix-shell/exercises

# Get the latest changes from the online repository
git pull

# Run the following command:
../scripts/initialize_exercises_dirtree.sh santi

# This should have generated some directories and files under the exercises directory.
# Creating many directories and files under:
#    /home/santi/Proyectos/imp/org/carpentry/--public/the-unix-shell/exercises/less

# Now go and explore your exercises playground directory
cd santi
ls -la

# I promise you there is some file with the string "secret" on these directories...
find . -iname '*secret*'
# ...did the last command help you to find it?

# You should be able to see a file called command-table.org
cat command-table.org | less
# That is a file that you can edit.
# Add very short descriptions and notes for the commands we have seen in class.
nano command-table.org
# Some of these commands we haven't seen.
# From now on you will be responsible to update the table with new commands.
# Although I will keep mine updated, so you can ask me for it at any time.

# You can notice that many files here have extension ".org"
# I just happen to like org-mode: http://orgmode.org/
# They are plain text files and you can read and edit them as you would any other text file
# If you do so with emacs or let github render them, they will look nice.
# See for example: https://github.com/strawlab/carpentry/blob/master/the-unix-shell/command-table.org
#+end_src

*** A2 Look into the initialisation script
As a general rule, one should always be aware of and mildly trust whatever is being executed. Let's have a look at the script we have just run:
#+begin_src bash
less ../scripts/initialize_exercises_dirtree.sh
#+end_src

We haven't explicitly seen yet some concepts we need to fully understand the script: variables, conditionals, links... The script is very simple despite some (unnecessary) complexity added for the sake of making it work no matter of the current working directory.

We will probably dissect this script in class. In the meantime, some questions for you to think:

**** What does it mean the "shebang", the initial two characters on the script?
#+begin_src bash
#!/bin/bash
#+end_src

**** How does the "-p" option change *mkdir* behavior?
As in:
#+begin_src bash
mkdir -p "${EXERCISES_DIR}"
#+end_src

What about the "--mode" option? What does it mean for a directory to have permissions "300"? This is probably something to ask in class...

**** How does the "-n" option change *cp* behavior?
As in:
#+begin_src bash
cp -n "$MY_DIR/../command-table.org" "${EXERCISES_DIR}"
#+end_src
- How does this relate to the redirection operator ">>".
- What does a programmer mean by "clobbering" a file?
- Why wouldn't I want to clobber your command-table.org file?

**** Why would one put curly brackets ("{}") around variable names.
As in:
#+begin_src bash
mkdir -p "${EXERCISES_DIR}/pdbs"
#+end_src

Was it needed here?

**** Why would one quote variable expansion when expanding paths?
For example:
#+begin_src bash
mkdir -p "${EXERCISES_DIR}"
#+end_src
Was it needed here?

**** What is the script purpose?

** Walking around the directory tree
The shell has associated a "working directory". The commands *pwd* and *cd* allow us to print and change the working directory. These are basic easy to use tools, but there are corner cases using them...

*** B1 Troubles changing directories
Change your working directory to your exercises "corner-cases" directory. For example:
#+begin_src bash
cd ~/carpentry/the-unix-shell/exercises/etienne/corner-cases
#+end_src

List the directory. Always using (the simplest) relative path from the "corner-cases" directory, try to change your directory to the following subdirectories:
#+begin_src bash
cd -dir-starting-with-dash
pwd
cd ~/carpentry/the-unix-shell/exercises/etienne/corner-cases

cd --dir-starting-with-doubledash and with spaces
pwd
cd ~/carpentry/the-unix-shell/exercises/etienne/corner-cases

cd -dir-starting-with-dash
pwd
cd ~/carpentry/the-unix-shell/exercises/etienne/corner-cases

#+end_src

Have any of these cd commands worked? Why? For the cases it haven't worked, make it work. Tips:

- How does cd interpret the dashes at the start of these directories names? There are a couple of ways to solve this. One of them is the common way of separating options from "operands" (for example the file a command is operating on) and we will see it appearing again when we look at *git* command lines. The other solution is the easy solution ;-).

- Once you know how to solve the "initial dash" problem, you might run into another problem and change to a directory different from the one you wanted to. What happened? How do you actually change to the directory we want to change to?

 **Note: actually I was confused with what a [[http://en.wikipedia.org/wiki/Dash][dash]] is. Not exactly the same as minus sign/hyphen, but you get the point ;-)**

*** B2 Troubles with file permissions

Let's now try to change to the poor directory called "useless-dir". We can do it using its absolute path as in:
#+begin_src bash
cd ~/carpentry/the-unix-shell/exercises/etienne/corner-cases/useless-dir
pwd
#+end_src

This is an absolute path because before calling *cd* bash expands tilde (*~*) to the home directory of the current user (which you can also access querying the environment variable $HOME). Now, probably you have not been able to cd into the directory. The shell tells you that you are not allowed. What are the permissions for the useless-dir directory?

You can go into the directory in two ways. One is to became root, the superuser, which can do anything she pleases, like enter directories even if she is not the owner and does not have permissions. If you are allowed, you can change your identity to that of another user. The command is *su*. Be careful if you change to root, great power comes with great responsibility. Usually you would be using [[http://xkcd.com/149/][*sudo*]] instead, that runs a single command as another user, which is deemed as a safer way of running commands as the superuser.

Now use the command to change permissions file (*chmod*) to give the directory the minimum permissions needed to cd into it. Notice that even if you do not have permissions at all on that directory, you can still change the permissions because you are the owner. Now try to list the contents of the directory. If you cannot, change again minimally the permissions so that you can. Finally, if you agree with me that this is a useless directory, delete it. You can use the command *rmdir* and notice that you do not need to have write permissions to delete a directory.

*** B3 Hidden files
There is a hidden directory in the corner-cases directory. Just list it.
*** B4 Troubles with file permissions 2
There is a file under this path and you can read it. OK, not so much of a secret...
#+begin_src bash
cat ~/the-unix-shell/exercises/santi/corner-cases/unreadable-dir/readable-dir/secret-message.txt
cd ~/the-unix-shell/exercises/santi/corner-cases/unreadable-dir/readable-dir/
#+end_src

However, *find* fails to find it...
#+begin_src bash
find ~/the-unix-shell/exercises/santi/corner-cases/unreadable-dir/readable-dir
#+end_src
(note that *find* without any parameter lists all the files it can list under the directory).

We also have troubles with tab-completion. For example, type...
#+begin_src bash
cd ~/the-unix-shell/exercises/santi/corner-cases/unreadable-dir
#+end_src
...and hit tab. Can you see any completion for "readable-dir"?

What do this tell us about how find and tab completion work? Can you think of a way of finding that file without changing the directory permissions?

** Dissecting command line expansions

When the shell runs a command, it first *expands* the command line. Command line expansion transforms the command line by substituting several types of "expansions" (parts of the command line that are meant to be interpreted as something different than their literal translation) by its expanded value. For bash, a quite technically oriented explanation of all the possible expansions can be found in its [[http://www.gnu.org/software/bash/manual/bashref.html#Shell-Expansions][manual]] (which we can consult locally by running *man bash* or *info bash*). Expansion should also explained in detail in any book about the shell.

*** C1 Visualizing command lines expansion

Is there a way in which we could see what is the actual expansion that bash performs for us before calling our script? There is, and it is quite simple.

When executed, [[./scripts/show-command-line-expanded.sh*][the following script]] will print the command line as expanded by the parent shell.
#+begin_src bash
#!/bin/bash
echo "$0 $*"
#+end_src bash

How does this work? In a bash script bash provides us with [[http://www.gnu.org/software/bash/manual/bashref.html#Shell-Parameters][several useful variables]]. In this example we use two of them: *$0* represents the name of the program and *$** is the complete list of parameters, as expanded by the parent shell. Note that these are read only variables.

Let's use this script to visualize the different command line expansions from bash.

**** Is there any simpler alternative to the previous script?

Do we already know other command(s) that could help us to easily visualize the expanded command line?
We probably did not need to write our own script...


*** C2 Practice brace expansion

What does the following expand to?
#+begin_src bash
cat {gal80,gal4,"Green Fluorescent Protein"}.txt
#+end_src bash

In which situation could such a command be useful? Contrast it to using filename expansion as in here:
#+begin_src bash
cat *.txt
#+end_src bash

See [[http://www.gnu.org/software/bash/manual/bashref.html#Brace-Expansion][brace expansion]] in the bash manual.


#**** Practice file name expansion

** Practicing find, grep and friends
*** G1 Find all the git repositories in the file system and list their remotes
Directories under control of git (let's call them at the moment "git repositories with associated working copy") contain a hidden directory called ".git". As we will see, it is in ".git" that all of the git magic happen. We will also see how important is to keep

**** Find all the git repositories in the filesystem that can be used as the current user
Let's define as usable git repository directories called ".git" which we can read, write and transverse (aka execution permission for directories). My command looks like...

#+begin_src bash
find / [predicates for "is a directory named .git with rwx permissions for the current user] 2>/dev/null
#+end_src

Here "2>/dev/null" mean "I do not care about error messages" (we will understand this better when we study file descriptors and how they relate to redirection). What happens if you get rid of the "2>dev/null" ending?

Note that there are many possible predicate combinations. Some might seem close to a correct solution, but not be totally correct. My solution uses 5 predicates.

# Instead an overcomplex solution uses two times backquotes and combine several many predicates using # "-and", "-or" and forcing precedence with "( )".
# Sketch of an overcomplex solution...
# find / -type d -name .git \( -user `whoami` -perm u+x -or -group `id -g` -perm g+x... \) 2>/dev/null | xargs -I {} find {} -maxdepth 1 -name config | xargs grep url

**** List the urls for the remotes of the git repositories

Once you have the list of all the git repositories in the file system, we would be interested on listing the [[http://en.wikipedia.org/wiki/Uniform_resource_locator][urls]] (addresses) of their [[http://gitref.org/remotes/]["remotes"]] (for example, the central repository in the github datacenter in San Francisco). On each ".git" directory there is a text file called "config", which, non surprisingly, contains the configuration of that git repository. There we can [[http://www.gitguys.com/topics/the-configuration-file-remote-section/][find the remotes]]. They look like this:

#+begin_src
[core]
  repositoryformatversion = 0
  filemode = true
  bare = false
  logallrefupdates = true
[remote "origin"]
  url = git@github.com:strawlab/carpentry.git
  fetch = +refs/heads/*:refs/remotes/origin/*
  push = HEAD
[branch "master"]
  remote = origin
  merge = refs/heads/master
#+end_src

Your task is to, using several commands with pipes, list the path to the git repository besides the url of its remotes. My solution, which is not perfect but does the job, uses 3 commands on a pipe (it is possible to make it in two if you are [[http://stackoverflow.com/questions/16225270/exclude-directories-in-find-that-dont-contain-a-specific-filename][a real pro of find]]). I use xargs two times with a second find command and a third grep command. The output looks like this:

#+begin_src
...
/home/santi/Proyectos/imp/software/ros-freeze/.git/config:	url = git@github.com:strawlab/ros-freeze.git
/home/santi/Proyectos/imp/software/ros_flydra/.git/config:	url = git@github.com:strawlab/ros_flydra.git
/home/santi/Proyectos/imp/software/py4science-vbc/.git/config:	url = git@github.com:strawlab/py4science-vbc.git
...
#+end_src

We can use this list for many purposes. For example, check which git repositories are not updated with the remote...

# find / -type d -name .git -readable -writable -executable -print0 2>/dev/null | xargs -0 -I {} find {} -maxdepth 1 -name config -print0 | xargs -0 grep url

** Environment variables
*** V1 Understanding how variables are passed to child processes

During class we have seen several examples of tweaking the environment (that is, change the values of [[http://en.wikipedia.org/wiki/Environment_variable][environment variables]] in the current shell process). We have also seen that child processes inherit the environment variables of their parents. But until now, we haven't given precise rules on how does this happen. When no precise rules are given of how a computer program behaves, we are prone to misunderstand it.

So let's fully understand how and why environment variables are exported to child processes, practicing some commands on the way.

Each and every process in the system have associated a collection of environment variables. Environment variables are therefore not a feature of the shell, but of the operating system. The shell just makes it easier to manipulate its environment. But the shell is just a regular process and it needs to play by the rules dictated by the operating system. In particular, these two rules apply:

*Rule 1*- When spawn (initialized), a child process inherits the environment of its father.

*Rule 2*- After a process starts running, no other process except itself can manipulate its environment.

These rules are very important to keep a simple and sane model on how processes behave. In particular, rule 2 means that a process can rely on its environment variables without caring on uncontrolled changes. Not even its parent process can manipulate its variables. There are of course [[http://en.wikipedia.org/wiki/Fork_%28operating_system%29][hacky ways]] of circumventing rule 2, but they are probably useful in very limited contexts (like when debugging a program).

As a side note, we will keep coming across similar notions of locality and protection of variables when we learn more about programming. These constraints are very important when creating programs which are easier to reason about.

For example:
#+begin_src bash
PATH="" ls
#+end_src

There are several ways of [[http://psung.blogspot.co.at/2008/11/reading-environment-variables-of.html][reading other processes current environment variables]].


**** Shell variables vs environment variables

Not all the variables


**** export

** Example project: Bash history tweaking

*** The truth about the bash history mechanism
*** ~/.bash_history
*** Optional: sourcing
*** When is the history read and written?
*** Tweaking bash: ~/.bashrc
*** Discussion: [[http://unix.stackexchange.com/questions/1288/preserve-bash-history-in-multiple-terminal-windows][Tweaking the history mechanism behavior]]

** Example project: Plotting molecules
*** PM1 Organize pdb files by their file contents
Goals: practice grep, pipes and symlinks
*** PM2 Downloading pdb files using wget and curl
Goals: practice xargs, backquoting
*** PM3 Extracting atom coordinates and plot them
Goals: practice grep with regular expressions

** Example project: Analyzing trajectories

** Example project: Managing fly stocks
** ProExercises

These are exercises that go beyond the basics...

*** PE1 What is the current working directory of a GUI application?

Actually *any* program running in your system (process) has an associated working directory.

For example, execute libreoffice impress (or any other gui program you might have installed):
#+begin_src bash
loffice --help
loffice --impress
#+end_src

A new libreoffice process should run. What is its process id? There are many ways to find out, one of them is using pgrep.
#+begin_src bash
pgrep loffice
#+end_src

Now that we know the process id, there are also several ways of querying the system for its current working directory. One of them is the program *pwdx*. If you man for pwdx...

#+begin_src bash
man pwdx
----------------------------------------------
NAME
       pwdx - report current working directory of a process

SYNOPSIS
       pwdx [options] pid [...]
...
#+end_src

Write a command line that, given a program name (or more in general, a regular expression matching program names), shows its current working directory. My solution uses pgrep, pwdx and backquote expansion and can show more than one process at a time (given that pwdx accepts a list of process ids, as indicated in the SYNOPSIS by "[...]").

As a side note, sometimes the PWD of GUI applications correspond to what you see in "choose file dialogs". Is it the case for mozilla firefox?
