* Unix Shell Exercises

There is no way to learn shell (or git or python...) without using it. Here is some training. Comments:

- I will be adding more exercises to this file. I will split the file if it gets too crowded. But exercises numeration (A1, A2, B1...) will keep constant.

- Most exercises should not be time consuming - a few minutes at worst.

- Come at any time to ask me any questions. But remember, *--help*, *man*, *info*, your classmates and *google* might be faster (in that increasing speed order).

- My plan is to solve many exercises in class. Both as reinforcement and to introduce new concepts.

- At some point I might ask you to hand-in solutions for some exercises, using git. Nothing awful will happen if you don't, but I also need feedback.

- If I ask you to hand-in, *man script* might come handy.

- You do not need to be able to answer to all the questions now. Most probably, you will very soon.


** Run the initialization script
*** A1 Generate the exercises playground, create a command list

Run the following commands in an interactive shell. Let me know if something goes wrong.

#+begin_src bash

# Go to the exercises subdirectory in your carpentry directory
cd ~/carpentry/the-unix-shell/exercises

# Get the latest changes from the online repository
git pull

# Run the following command:
../scripts/initialize_exercises_dirtree.sh santi

# This should have generated some directories and files under the exercises directory.
# Creating many directories and files under:
#    /home/santi/Proyectos/imp/org/carpentry/--public/the-unix-shell/exercises/less

# Now go and explore your exercises playground directory
cd santi
ls -la

# I promise you there is some file with the string "secret" on these directories...
find . -iname '*secret*'
# ...did the last command help you to find it?

# You should be able to see a file called command-table.org
cat command-table.org | less
# That is a file that you can edit.
# Add very short descriptions and notes for the commands we have seen in class.
nano command-table.org
# Some of these commands we haven't seen.
# From now on you will be responsible to update the table with new commands.
# Although I will keep mine updated, so you can ask me for it at any time.

# You can notice that many files here have extension ".org"
# I just happen to like org-mode: http://orgmode.org/
# They are plain text files and you can read and edit them as you would any other text file
# If you do so with emacs or let github render them, they will look nice.
# See for example: https://github.com/strawlab/carpentry/blob/master/the-unix-shell/command-table.org
#+end_src

*** A2 Look into the initialisation script

As a general rule, one should always be aware and mildly trust whatever is being executed. Let's have a look at the script we have just run:
#+begin_src bash
less ../scripts/initialize_exercises_dirtree.sh
#+end_src

We haven't explicitly seen yet some concepts we need to fully understand the script: variables, conditionals, links... The script is very simple despite some (unnecessary) complexity added for the sake of making the script work no matter of the current working directory.

We will probably dissect this script in class. In the meantime, some questions for you to think:

**** What does it mean the "shebang", the initial two characters on the script?
#+begin_src bash
#!/bin/bash
#+end_src

**** How does the "-p" option change *mkdir* behavior?
As in:
#+begin_src bash
mkdir -p "${EXERCISES_DIR}"
#+end_src

What about the "--mode" option? What does it mean for a directory to have permissions "300"? This is probably something to ask in class...

**** How does the "-n" option change *cp* behavior?
As in:
#+begin_src bash
cp -n "$MY_DIR/../command-table.org" "${EXERCISES_DIR}"
#+end_src
- How does this relate to the redirection operator ">>".
- What does a programmer mean by "clobbering" a file?
- Why wouldn't I want to clobber your command-table.org file?

**** Why would one put curly brackets ("{}") around variable names.
As in:
#+begin_src bash
mkdir -p "${EXERCISES_DIR}/pdbs"
#+end_src

Was it needed here?

**** Why would one quote variable expansion when expanding paths?
For example:
#+begin_src bash
mkdir -p "${EXERCISES_DIR}"
#+end_src
Was it needed here?

**** What is the script purpose?

** Walking around the directory tree
** Dissecting command line expansions
** Example project: Bash history tweaking

*** The truth about the bash history mechanism
*** ~/.bash_history
*** Optional: sourcing
*** When is the history read and written?
*** Tweaking bash: ~/.bashrc
*** Discussion: [[http://unix.stackexchange.com/questions/1288/preserve-bash-history-in-multiple-terminal-windows][Tweaking the history mechanism behavior]]

** Example project: Plotting molecules

** Example project: Analyzing trajectories

** Example project: Managing fly stocks
