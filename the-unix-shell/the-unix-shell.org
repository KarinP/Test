#+STARTUP: indent
#+STARTUP: showstars

* Introduction to Unix Shells

** Keeping track of commands
*** What have I done: *history*
*** What I have done: *script*
*** What have I done: up and down arrows


** The unix shell and some commands

*** Unix shell
*** Bash shell
*** Prompt
*** Read-eval-print loop (REPL)
*** Command line
*** Command: *whoami*
*** Command: *date*
*** Command: *echo*
*** Command: *bash*

*** Command: *cat*


** The directory tree

*** Directory (folder)
*** Command: *mkdir*
*** Command: *cd*
*** Tab-completion (Tab)
*** File
*** Command: *touch*
*** Directory tree (directory hierarchy)
*** Slash ("/")
*** Command: *ls*
*** Working directory
*** Command: *pwd*
*** Command: *cd*
*** Path
*** Absolute path
*** Relative path
*** Parent directory (..)
*** Home directory (~)
*** Root directory (/)
*** Hidden files


** More about commands

*** Command syntax
*** Command: *whereis*
*** PATH
*** Optional: environment variable
*** Built-in command
*** Command options
*** Unix-style options
*** GNU-style options
*** Other types of options
*** Seeking help (--help, *man*, *info*)


** Redirection and pipelines

*** Output redirection (>, >>)
*** Pagers (*more*, *less*, *pg*)
*** Creating pipelines ('|')
*** Command: *head* and *tail*


** Understanding better the command line

*** What is my command? (*which*)
*** What really is my command (*type*)
*** Optional: *hash*
*** What's going on with Dorothea's *cd*?
*** Command line expansion
*** globbing
*** Glob patterns ("*", "?")
*** Controlling expansion: quoting
*** Single quotes vs double quotes
*** Grave quotes ("`")


** File permissions

*** Shells are just operating system wrappers
*** Unix is multiuser
*** File permissions: interpreting ls -l
*** Who can do what: user, group and everybody
*** Who can do what: read, write, execute
*** Change file owner (*chown*)
*** Change file group (*chgrp*)
*** Change file permissions (*chmod*)
*** The superuser (root and you)
*** Command: *sudo*
*** Change user account: *usermod*


** Scripts sneak peek
*** Scripts: automation, productivity, reproducibility
*** Writing scripts
*** What is a loop?
*** An infinite loop script
#+begin_src bash
#!/bin/bash
while true                            # Forever...
do
    echo "My Process ID (PID) is $$"  # Show the current process id
    echo "And now we are at" `date`   # Show the time and date
    echo "Press [CTRL+C] to stop"     # Show some help
    echo "Press [CTRL+Z] to pause"    # Show more help
    echo "---------------------------------------------------------"
    sleep 1                           # Sleep 1 second
done
#+end_src


** Wrapping up loose ends
*** Use the output of script: scriptreplay, less -R, cat
*** Command line expansion and ls /usr/*n


** Searching things
*** Recap: *which* *whereis*
*** Command: *find*
*** *find* does not use GNU-style options (no "--")
*** *find* predicates
*** Recursion
*** Limiting recursion
*** Doing things with the findings (-exec, *xargs*)
*** Filtering / searching lines: *grep*
*** Optional: regular expressions
*** Optional: better non-standard tools: *grin* and *ag*


** Environment variables
*** Passing information to processes
*** Listing environment variables: *set* or *env*
*** Optional: All environment variables are strings
*** Variable lists (e.g. PATH) are separated by colon (:)
*** Set variable value: VARIABLE_NAME=value
*** Get variable value: $VARIABLE_NAME
*** Variable scope (*export*)
*** $EDITOR
*** $PATH
*** $PWD
*** $LOGNAME
*** $HOME
*** $PYTHONPATH
*** $GIT_COMMITTER_NAME
*** ...


** Job control

*** Processes
*** Process status: *ps*
*** Command: *pgrep*
*** Command: *top*, *htop*, *glances*, *iotop*...
*** The process id (PID)
*** The process tree
*** Parent process, child processes
*** Why *cd* must be a builtin
*** Command *pstree*
*** Kill a process (*kill*, *pkill*)
*** Pausing a process (C-z, Control-z, ^Z)
*** Sending a process to the background (*bg*, "&" command line modifier)
*** Background process id (%BID)
*** Redirecting error (2>, 2>>, &>)
*** Sending a process to the foreground (*fg*)
*** Jobs (*jobs*)
*** Dettaching a process (*nohup*, *disown*)
*** Real-time streaming of a file: *tail -f*
*** Experiment: highly concurrent file rewrite


** Bash history tweaking

*** The truth about the bash history mechanism
*** ~/.bash_history
*** Optional: sourcing
*** When is the history read and written?
*** Tweaking bash: ~/.bashrc
*** Discussion: [[http://unix.stackexchange.com/questions/1288/preserve-bash-history-in-multiple-terminal-windows][Tweaking the history mechanism behavior]]


** Understanding better the file system
*** In unix everything is a file
*** The truth about redirection
*** Optional: file descriptors
*** 2>&1
*** Devices (/dev)
*** Mounting (*mount*)
*** Mounting points
*** Optional: /etc/fstab
*** Links
*** inodes
*** Moving files (*mv*)
*** Symbolic links (*ln -s*)
*** John's commands explained

*** Keeping permissions *tar*


** Using computers remotelly: ssh


** TODO Pending questions

*** How to indicate tab as delimiter for cut?

man cut ==> /tab ==> it is the default!

also: http://www.linuxquestions.org/questions/programming-9/how-use-cut-d-%27delimiter%27-is-delimiter-is-a-tab-720186/

*** When to use pipes, when backquotes, when xargs, when exec?

Starting from the fact that some do different things (pipes write to stdin, the rest "generate command lines").

A good example could come from find + grep
