#+STARTUP: indent
#+STARTUP: showstars

* Managing Change: Version Control with *git*

- [[http://arokem.github.io/2013-09-16-ISI/lessons/git-notebook/git-for-scientists.slides.html#/][A cool presentation]]
- [[http://ndpsoftware.com/git-cheatsheet.html][Cool visualisation of the "5 git areas]]
- [[http://git.661346.n2.nabble.com/Git-terminology-remote-add-track-stage-etc-td5648599.html][Getting angry with the messed up git jargon]]
- [[http://git.661346.n2.nabble.com/Git-terminology-remote-add-track-stage-etc-td5648599.html][Git ready]]

** A gentle introduction to git
*** Why do we need version control?
**** Managing change
**** Not only for collaboration
**** A motivational paper: http://www.scfbm.org/content/8/1/7
*** Git
*** There is no magic: git command (*git*)
*** There is no magic: git repository (*.git*)
*** git subcommands (*git --help*)
*** git subcommands are autocompleted
*** Git vs github
*** Looking at a repository: *git status*
*** Looking at a repository: *git log*
*** Looking at a repository: *gitk*
*** The key to not getting into trouble: being systematic


** Getting into bussines: creating your own repository

*** Initializing a git repository: *git init*
*** Initializing a "bare" git repository: *git init --bare*
*** Setting-up a remote to our repository
*** Adding a file to the repository *git add*
*** Adding changes to the repository *git add*
*** Actually adding changes to a repository


** Good practices
*** Before committing, fetch!
*** Only do pull --ff-only
*** For the time being, if something goes wrong, contact us
*** Do not make anonymous commits
*** Use your own branch - but still you might want to merge with our changes

** Git internals
*** Hashes
*** Commits
*** Branches
*** ...
